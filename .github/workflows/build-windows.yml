# reference: https://github.com/zhuzichu520/FluentUI/blob/main/.github/workflows/windows.yml

name: Windows

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - qt_ver: 6.8.1        
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            qt_arch_install: msvc2022_64  

    env:
      targetName: BleHelper.exe

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: 1.10.2
          
      - name: Cache Qt
        uses: actions/cache@v3
        with:
          path: ~/.cache/qt
          key: qt-${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
          
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: ${{steps.cache-qt.outputs.cache-hit}}
          modules: 'qt5compat qtmultimedia qtshadertools qtimageformats qtspeech qt3d qtconnectivity'
          
      - name: Build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          ninja --version
          mkdir build
          cd build
          cmake -DCMAKE_PREFIX_PATH=${{steps.cache-qt.outputs.cache-hit}}\${{ matrix.qt_ver }}\${{ matrix.qt_arch_install }} -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=Release -GNinja ..
          cmake --build . --target all --config Release --parallel
          cmake --build . --target Script-DeployRelease
           
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.targetName }}
          path: dist

      - name: Download Qt6Bluetooth.dll from release
        run: |
          # 设置仓库信息和版本
          OWNER="lucky9loogn"
          REPO="build-qtconnectivity"
          TAG="v6.8.1-fixed"  # 目标 Release 标签

          # 使用 GitHub API 获取该 Release 的所有资产信息
          ASSET_URL=$(curl -s "https://api.github.com/repos/$OWNER/$REPO/releases/tags/$TAG" \
            | jq -r '.assets[] | select(.name == "Qt6Bluetooth.dll") | .browser_download_url')

          # 检查是否找到了资产
          if [ -z "$ASSET_URL" ]; then
            echo "Asset Qt6Bluetooth.dll not found!"
            exit 1
          fi

          # 下载文件
          echo "Downloading Qt6Bluetooth.dll..."
          curl -L -o "Qt6Bluetooth.dll" "$ASSET_URL"
          
      - name: Copy Qt6Bluetooth.dll to dist directory (overwrite)
        run: |
          # 确保 dist 目录存在
          mkdir -p dist

          # 将 Qt6Bluetooth.dll 文件复制到 dist 目录并强制覆盖
          cp -f Qt6Bluetooth.dll dist/Qt6Bluetooth.dll

      - name: Verify copy
        run: |
          # 验证文件是否复制成功
          if [ -f "dist/Qt6Bluetooth.dll" ]; then
            echo "Qt6Bluetooth.dll copied successfully to dist directory!"
          else
            echo "Copy failed!"
            exit 1
          fi

      - name: inno setup install
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: zhuzichu520/inno-setup-action@v1.0.1
        with:
          filepath: ./package/InstallerScript.iss

      - name: Upload release
        # if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./package/installer.exe
          asset_name: ${{ env.fileName }}_${{ github.ref_name }}_${{ matrix.qt_arch }}_Qt${{ matrix.qt_ver }}.exe
          tag: ${{ github.ref }}
          overwrite: true 
